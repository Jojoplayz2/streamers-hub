name: üîÅ Project ‚Üí Issue Status Sync

on:
  schedule:
    - cron: "*/2 * * * *"
  workflow_run:
    workflows: ["üß≠ Issue ‚Üí Project Status Sync"]
    types: [completed]

permissions:
  issues: write
  projects: read

jobs:
  reverse_sync:
    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const PROJECT_ID = "PVT_kwHODJwWRs4BGPB1";
            const STATUS_FIELD_ID = "PVTSSF_lAHODJwWRs4BGPB1zg3VyXg";
            const OPT = {
              ENTRY: "f75ad846",
              IN_PROGRESS: "47fc9ee4",
              DONE_COMPLETED: "98236657",
              DONE_NOT_PLANNED: "13d5fa23",
              DONE_DUPLICATE: "8356ef49"
            };

            // Step 1: Find all items in this project that are Issues
            const query = `
              query($project: ID!) {
                node(id: $project) {
                  ... on ProjectV2 {
                    items(first: 50) {
                      nodes {
                        id
                        fieldValueByName(name: "Status") {
                          ... on ProjectV2ItemFieldSingleSelectValue {
                            optionId
                          }
                        }
                        content {
                          ... on Issue {
                            id
                            state
                          }
                        }
                      }
                    }
                  }
                }
              }`;

            const data = await github.graphql(query, { project: PROJECT_ID });
            const items = data.node.items.nodes;

            for (const item of items) {
              const issue = item.content;
              if (!issue) continue;
              
              const optionId = item.fieldValueByName?.optionId;
              const isClosed = issue.state === "CLOSED";

              // Step 2: Apply rules based on Status
              if (optionId === OPT.ENTRY || optionId === OPT.IN_PROGRESS) {
                // R-OPEN-1 (Always reopen on open statuses)
                if (isClosed) {
                  await github.graphql(`
                    mutation($id:ID!) {
                      reopenIssue(input:{issueId:$id}) { issue { id } }
                    }`, { id: issue.id }
                  );
                }
                continue;
              }

              if (optionId === OPT.DONE_COMPLETED) {
                if (!isClosed) {
                  await github.graphql(`
                    mutation($id:ID!) {
                      closeIssue(input:{issueId:$id, stateReason:COMPLETED}) { issue { id } }
                    }`, { id: issue.id }
                  );
                }
                continue;
              }

              if (optionId === OPT.DONE_NOT_PLANNED) {
                if (!isClosed) {
                  await github.graphql(`
                    mutation($id:ID!) {
                      closeIssue(input:{issueId:$id, stateReason:NOT_PLANNED}) { issue { id } }
                    }`, { id: issue.id }
                  );
                }
                continue;
              }

              if (optionId === OPT.DONE_DUPLICATE) {
                if (!isClosed) {
                  await github.graph
