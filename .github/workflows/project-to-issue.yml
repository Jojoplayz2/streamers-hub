name: üîÅ Project ‚Üí Issue Close Sync

on:
  projects_v2_item:
    types: [edited]

permissions:
  issues: write
  projects: read

jobs:
  sync:
    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const PROJECT_ID = "PVT_kwHODJwWRs4BGPB1";
            const STATUS_FIELD_ID = "PVTSSF_lAHODJwWRs4BGPB1zg3VyXg";
            const OPT = {
              ENTRY: "f75ad846",
              IN_PROGRESS: "47fc9ee4",
              DONE_COMPLETED: "98236657",
              DONE_NOT_PLANNED: "13d5fa23",
              DONE_DUPLICATE: "8356ef49"
            };

            const itemId = context.payload.projects_v2_item.node_id;

            const q = `
              query($id:ID!){
                node(id:$id){
                  ... on ProjectV2Item {
                    content { __typename ... on Issue { id state } }
                    fieldValueByName(name:"Status") {
                      ... on ProjectV2ItemFieldSingleSelectValue { optionId }
                    }
                  }
                }
              }`;
            const data = await github.graphql(q, { id: itemId });
            const issue = data.node.content;
            const optionId = data.node.fieldValueByName?.optionId;
            if (!issue || issue.__typename !== "Issue") return;

            async function close(reason) {
              return github.graphql(`
                mutation($id:ID!,$reason:IssueClosedStateReason!){
                  closeIssue(input:{issueId:$id,stateReason:$reason}){ issue{id} }
                }`,
                { id: issue.id, reason }
              );
            }
            async function reopen() {
              return github.graphql(`
                mutation($id:ID!){
                  reopenIssue(input:{issueId:$id}){ issue{id} }
                }`,
                { id: issue.id }
              );
            }

            if (optionId === OPT.ENTRY || optionId === OPT.IN_PROGRESS) {
              if (issue.state === "CLOSED") await reopen();
              return;
            }
            if (optionId === OPT.DONE_COMPLETED) return close("COMPLETED");
            if (optionId === OPT.DONE_NOT_PLANNED) return close("NOT_PLANNED");
            if (optionId === OPT.DONE_DUPLICATE) return close("DUPLICATE");
