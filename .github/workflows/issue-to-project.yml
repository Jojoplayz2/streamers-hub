name: ðŸ§­ Issue â†’ Project Status Sync

on:
  issues:
    types: [opened, assigned, closed, reopened]

permissions:
  issues: write
  projects: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const PROJECT_ID = "PVT_kwHODJwWRs4BGPB1";
            const STATUS_FIELD_ID = "PVTSSF_lAHODJwWRs4BGPB1zg3VyXg";
            const OPT = {
              ENTRY: "f75ad846",
              IN_PROGRESS: "47fc9ee4",
              DONE_COMPLETED: "98236657",
              DONE_NOT_PLANNED: "13d5fa23",
              DONE_DUPLICATE: "8356ef49"
            };

            const issueNodeId = context.payload.issue.node_id;
            const action = context.payload.action;

            const sleep = ms => new Promise(r => setTimeout(r, ms));
            await sleep(1200); // wait for auto-add to finish

            // Get Project Item ID
            const q = `
              query($issueId: ID!) {
                node(id:$issueId) {
                  ... on Issue {
                    projectItemsV2(first:20) {
                      nodes { id project { id } }
                    }
                  }
                }
              }`;
            const data = await github.graphql(q, { issueId: issueNodeId });
            const item = data.node.projectItemsV2.nodes.find(n => n.project.id === PROJECT_ID);
            if (!item) return;

            async function setOption(optionId) {
              const m = `
                mutation($pid:ID!,$item:ID!,$fid:ID!,$opt:String!) {
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$pid,itemId:$item,fieldId:$fid,
                    value:{singleSelectOptionId:$opt}
                  }) { projectV2Item { id } }
                }`;
              await github.graphql(m, {
                pid: PROJECT_ID,
                item: item.id,
                fid: STATUS_FIELD_ID,
                opt: optionId
              });
            }

            if (action === "opened") return setOption(OPT.ENTRY);
            if (action === "assigned" && context.payload.assignee) return setOption(OPT.IN_PROGRESS);
            if (action === "reopened") return setOption(OPT.ENTRY);

            if (action === "closed") {
              const sr = (context.payload.issue.state_reason || "").toLowerCase();
              if (sr === "not_planned") return setOption(OPT.DONE_NOT_PLANNED);
              if (sr === "duplicate") return setOption(OPT.DONE_DUPLICATE);
              return setOption(OPT.DONE_COMPLETED);
            }
