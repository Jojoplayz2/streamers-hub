name: ðŸ§­ Issue â†’ Project Status Sync

on:
  issues:
    types: [opened, edited, assigned, unassigned, closed, reopened]

permissions:
  issues: write
  projects: write

jobs:
  project_sync:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const PROJECT_ID = "PVT_kwHODJwWRs4BGPB1";
            const STATUS_FIELD_ID = "PVTSSF_lAHODJwWRs4BGPB1zg3VyXg";
            const OPT = {
              ENTRY: "f75ad846",
              IN_PROGRESS: "47fc9ee4",
              DONE_COMPLETED: "98236657",
              DONE_NOT_PLANNED: "13d5fa23",
              DONE_DUPLICATE: "8356ef49"
            };

            const issueNodeId = context.payload.issue.node_id;
            const action = context.payload.action;

            const sleep = (ms) => new Promise((r) => setTimeout(r, ms));

            // --- Helpers ----------------------------------------------------
            async function findItemIdViaProject(issueId) {
              const q = `
                query($project: ID!) {
                  node(id: $project) {
                    ... on ProjectV2 {
                      items(first: 100) {
                        nodes {
                          id
                          content { __typename ... on Issue { id } }
                        }
                      }
                    }
                  }
                }`;
              const data = await github.graphql(q, { project: PROJECT_ID });
              const items = data?.node?.items?.nodes || [];
              const match = items.find(n => n.content?.__typename === "Issue" && n.content.id === issueId);
              return match?.id || null;
            }

            async function addIssueToProject(issueId) {
              const m = `
                mutation($project: ID!, $content: ID!) {
                  addProjectV2ItemById(input: { projectId: $project, contentId: $content }) {
                    item { id }
                  }
                }`;
              const added = await github.graphql(m, { project: PROJECT_ID, content: issueId });
              return added?.addProjectV2ItemById?.item?.id || null;
            }

            async function setStatus(itemId, optionId) {
              const m = `
                mutation($project: ID!, $item: ID!, $field: ID!, $opt: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $project,
                    itemId: $item,
                    fieldId: $field,
                    value: { singleSelectOptionId: $opt }
                  }) { projectV2Item { id } }
                }`;
              await github.graphql(m, {
                project: PROJECT_ID,
                item: itemId,
                field: STATUS_FIELD_ID,
                opt: optionId
              });
            }

            // --- Ensure we have a project item ID --------------------------
            let itemId = null;

            // 1) Give auto-add a moment, then try to find it
            for (let i = 0; i < 5 && !itemId; i++) {
              if (i > 0) await sleep(800);
              itemId = await findItemIdViaProject(issueNodeId);
            }

            // 2) If still not found, add it ourselves and re-check once
            if (!itemId) {
              core.info("Item not found; adding issue to project ourselvesâ€¦");
              await addIssueToProject(issueNodeId);
              await sleep(800);
              itemId = await findItemIdViaProject(issueNodeId);
            }

            if (!itemId) {
              core.notice("Could not locate or add the project item for this issue. Skipping.");
              return;
            }

            // --- Event â†’ Status mapping ------------------------------------
            if (action === "opened") {
              await setStatus(itemId, OPT.ENTRY);
              return;
            }

            if (action === "assigned" && context.payload.assignee) {
              await setStatus(itemId, OPT.IN_PROGRESS);
              return;
            }

            if (action === "unassigned") {
              // Your earlier preference was "do nothing on unassign"; if you want Entry instead, uncomment:
              // await setStatus(itemId, OPT.ENTRY);
              return;
            }

            if (action === "reopened") {
              await setStatus(itemId, OPT.ENTRY);
              return;
            }

            if (action === "closed") {
              const reason = (context.payload.issue.state_reason || "").toLowerCase();
              if (reason === "not_planned") { await setStatus(itemId, OPT.DONE_NOT_PLANNED); return; }
              if (reason === "duplicate")   { await setStatus(itemId, OPT.DONE_DUPLICATE);   return; }
              await setStatus(itemId, OPT.DONE_COMPLETED);
              return;
            }

            // Edited (optional): if you want edits to imply "In progress", uncomment:
            // if (action === "edited") {
            //   await setStatus(itemId, OPT.IN_PROGRESS);
            // }