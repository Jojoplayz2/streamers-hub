name: üîÅ Issue ‚Üí Project status sync

on:
  issues:
    types: [opened, assigned, closed, reopened]

jobs:
  sync_issue_to_project:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
      projects: read

    steps:
      - name: Sync status from Issue to Project
        uses: actions/github-script@v7
        env:
          PROJECT_ID: PVT_kwHODJwWRs4BGPB1
          STATUS_FIELD_ID: PVTSSF_lAHODJwWRs4BGPB1zg3VyXg
          OPT_ENTRY: f75ad846
          OPT_INPROG: 47fc9ee4
          OPT_DONE_COMPLETED: 98236657
          OPT_DONE_NOT_PLANNED: 13d5fa23
          OPT_DONE_DUPLICATE: 8356ef49
        with:
          script: |
            const projectId = process.env.PROJECT_ID;
            const statusFieldId = process.env.STATUS_FIELD_ID;

            const opts = {
              ENTRY: process.env.OPT_ENTRY,
              INPROG: process.env.OPT_INPROG,
              DONE_COMPLETED: process.env.OPT_DONE_COMPLETED,
              DONE_NOT_PLANNED: process.env.OPT_DONE_NOT_PLANNED,
              DONE_DUPLICATE: process.env.OPT_DONE_DUPLICATE,
            };

            const issue = context.payload.issue;
            const issueNodeId = issue.node_id;

            // Decide target option based on event
            let targetOptionId = null;

            if (context.payload.action === 'opened') {
              targetOptionId = opts.ENTRY;
            } else if (context.payload.action === 'assigned') {
              // (You chose to ignore unassigned; this only reacts to assigned)
              targetOptionId = opts.INPROG;
            } else if (context.payload.action === 'closed') {
              // Map close reason to your 3 Done statuses
              const reason = issue.state_reason; // 'completed' | 'not_planned' | 'duplicate' (GitHub)
              if (reason === 'completed') targetOptionId = opts.DONE_COMPLETED;
              else if (reason === 'not_planned') targetOptionId = opts.DONE_NOT_PLANNED;
              else if (reason === 'duplicate') targetOptionId = opts.DONE_DUPLICATE;
              else targetOptionId = opts.DONE_COMPLETED; // sensible default
            } else if (context.payload.action === 'reopened') {
              targetOptionId = opts.ENTRY; // R1 behavior
            } else {
              return core.info('No action to sync.');
            }

            // Helper: get itemId for this issue in your project (retry because auto-add may lag)
            async function findProjectItemIdWithRetry(retries = 10, delayMs = 1500) {
              for (let i = 0; i < retries; i++) {
                const q = await github.graphql(`
                  query($issueId: ID!) {
                    node(id: $issueId) {
                      ... on Issue {
                        projectV2Items(first: 20) {
                          nodes {
                            id
                            project { id }
                          }
                        }
                      }
                    }
                  }
                `, { issueId: issueNodeId });

                const items = q.node?.projectV2Items?.nodes || [];
                const item = items.find(n => n.project?.id === projectId);
                if (item?.id) return item.id;
                if (i < retries - 1) await new Promise(r => setTimeout(r, delayMs));
              }
              return null;
            }

            const itemId = await findProjectItemIdWithRetry();
            if (!itemId) {
              core.warning('Could not find project item for this issue. Make sure Project auto-add is enabled.');
              return;
            }

            // Update the Status field on the project item
            await github.graphql(`
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { singleSelectOptionId: $optId }
                }) {
                  projectV2Item { id }
                }
              }
            `, {
              projectId,
              itemId,
              fieldId: statusFieldId,
              optId: String(targetOptionId)
            });

            core.info(`Updated project status for issue #${issue.number}.`);
